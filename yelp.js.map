{"version":3,"file":"yelp.js","sourceRoot":"","sources":["yelp.ts"],"names":[],"mappings":"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","sourcesContent":["import fs = require(\"fs\");\nimport path = require(\"path\");\nimport yelp = require('yelp-fusion');\nimport { obj, num } from \"@crabel/util\";\nimport { files, data_dir } from \"./config\";\nimport uui = require('uuid/v1');\n//\nimport multimeter = require(\"multimeter\");\nimport table = require(\"@crabel/table\");\nimport CoordsCalc = require(\"./coords-calc\");\nimport pako = require(\"pako\");\nimport { Base64 } from 'js-base64';\n\n//\n\nconst yelp_api_key = \"o0VLwk0bQ9Q0wgIl56wglRMVrxOHhky4TviCA8_O3q7CWwpwGYKWn2EF3gMgdQbReW3k7odKDFZ9n8fGR6e2G8ju5227YpVZoo_p5BAnxQJ4qZZsNB5u-S7ofojMW3Yx\";\nconst yelp_max_results = 1000;\n\nlet multi : any = null;\nlet pbar_step, pbar_page, pbar_stitch;\n\n//\n\nexport type Coords = {\n    latitude: number;\n    longitude: number;\n    //\n    left?: number;\n    top?: number;\n}\n\nexport type YelpFilters = {\n    term?: string;\n    radius?: number;\n    location?: string | number;\n    price?: string;\n    latitude?: number;\n    longitude?: number;\n    offset?: number;\n    limit?: number;\n}\n\nexport type AliasTitle = {\n    alias: string;\n    title: string;\n}\n\nexport type Location = {\n    address1: string;\n    address2: string;\n    city: string;\n    zip_code: string;\n    state: string;\n    country: string;\n    display_address: string[];\n}\n\nexport type YelpItem = {\n    id: string;\n    alias: string;\n    name: string;\n    image_url: string;\n    is_closed: boolean;\n    url: string;\n    review_count: number;\n    categories: AliasTitle[];\n    rating: number;\n    coordinates: Coords,\n    transactions: string[];\n    price: string;\n    location: Location;\n    phone: string;\n    display_phone: string;\n    distance: number;\n}\n\nexport type ExecStep = Coords & {\n    top: number;\n    left: number;\n    radius: number;\n    count: number;\n}\n\nexport type ExecPlan = {\n    uid: string;\n    filters: YelpFilters;\n    center: Coords;\n    radius: number;\n    steps: ExecStep[];\n    cur_step: number;\n}\n\nexport type LoadPlanOptions = {\n    force?: boolean;\n    verbose?: boolean;\n}\n\nexport type ExecOptions = {\n    force: boolean;\n}\n\nexport type VerifyOptions = {\n    tolerance: number | string;\n}\n\nexport type StitchOptions = {\n    targetDir?: string;\n}\n\n\nconst convert = {\n    meters_per_mile: 1609.34,\n\n    toMiles(m) {\n        return m * (1 / this.meters_per_mile);\n    },\n\n    toMeters(m) {\n        return Math.round(m * this.meters_per_mile);\n    }\n};\n\n\nconst def_filter = { radius: 1000 };\n\nfunction stepFile(plan, step_index: number) : string {\n    return path.join(data_dir, plan.uid + \"_\" + num.zeroPad(step_index, 3)) + \".json\";\n}\n\n\n//\n\nexport class Yelp {\n\n    client: any;\n    center: Coords = null;\n    query_count: number;\n    retry_count: number;\n    total_query_time: number;\n\n    //\n\n\n    constructor() {\n        this.client = null;\n    }\n\n\n    //\n\n    static async getCoords(location: string | number) : Promise<Coords> {\n        let client = yelp.client(yelp_api_key);\n        let res = await client.search({ location });\n\n        return res.jsonBody.region.center;\n    }\n\n\n    async loadPlan(filters: YelpFilters, radius: number, options: LoadPlanOptions) : Promise<ExecPlan> {\n        multi = multimeter(process);\n        try {\n            console.log(`[+] Calculating execution plan from \"${filters.location}\" with radius of ${radius} miles...`);\n            let plan: ExecPlan;\n            if (!options.force && fs.existsSync(files.running_plan)) {\n                plan = JSON.parse(fs.readFileSync(files.running_plan, \"utf8\"));\n                if (plan.cur_step < (plan.steps.length)) {\n                    console.log(`[+] Found pending plan with ${plan.steps.length}, steps ` +\n                        `remaining: ${plan.steps.length - plan.cur_step}`);\n                    console.log(`    >> Use \"node importer plan --force\" to replace the pending plan.`);\n\n                    return plan;\n                }\n            }\n\n            if (!this.center) {\n                let res = await this.search({location: filters.location});\n                this.center = res.jsonBody.region.center;\n                this.center.top = 0;\n                this.center.left = 0;\n            }\n\n            plan = {\n                uid: uui().split(\"-\").join(\"\"),\n                filters,\n                center: this.center,\n                radius,\n                steps: [],\n                cur_step: 0\n            };\n\n            await this._loadPlan(plan, radius, this.center);\n\n            this.savePlan(plan);\n            console.log(`[+] Execution plan with ${plan.steps.length} steps was created and saved.`);\n            console.log(`    >> Use \"node importer exec\" to execute the plan.`);\n            console.log();\n\n            if (options.verbose) {\n                table.log({\n                    filters: JSON.stringify(plan.filters),\n                    center: `(${plan.center.latitude.toFixed(4)}, ` +\n                        `${plan.center.longitude.toFixed(4)})`,\n                    radius: plan.radius,\n                    step_count: plan.steps.length\n                });\n\n                table.log(plan.steps.slice(0, 20), [\n                    \"top\", \"left\",\n                    { caption: \"latitude\", decimals: 4, },\n                    { caption: \"longitude\", decimals: 4, },\n                    { caption: \"radius\", type: table.DataType.float, decimals: 2 },\n                    \"count\"\n                ]);\n\n                if (plan.steps.length > 20)\n                    console.log(\"...\");\n                console.log();\n            }\n\n            return plan;\n        }\n        finally {\n            this.endProcess();\n        }\n    }\n\n    private async _loadPlan(plan: ExecPlan, radius, coords) {\n        try {\n            let filters = obj.copy(plan.filters);\n            filters.radius = convert.toMeters(radius);\n            filters.latitude = coords.latitude;\n            filters.longitude = coords.longitude;\n\n            let res = await this.search(filters);\n            let count = res.jsonBody.total;\n\n            if (yelp_max_results < count) {\n                let corners = expandSearch(coords, radius / 2);\n\n                radius = Math.sqrt(radius * radius + radius * radius) / 2;\n\n                for (let c of corners)\n                    await this._loadPlan(plan, radius, c);\n            }\n            else {\n                plan.steps.push({\n                    top: coords.top, left: coords.left,\n                    latitude: coords.latitude, longitude: coords.longitude,\n                    radius: radius, count: count\n                });\n            }\n        }\n        catch (err) {\n            if (err.statusCode === 400)\n                throw err;\n\n            await sleep(1000);\n            await this._loadPlan(plan, radius, coords);\n        }\n    }\n\n\n    async execPlan(options: ExecOptions) : Promise<void> {\n        let plan = this.loadPendingPlan();\n\n        multi = multimeter(process);\n        try {\n            this.query_count = 0;\n            this.retry_count = 0;\n            this.total_query_time = 0;\n\n            const items_per_search = 50;\n\n            let total_pages = 0;\n            let total_items = 0;\n            for (let si=0; si < plan.steps.length; ++si) {\n                let s = plan.steps[si];\n                total_pages += Math.ceil(s.count / items_per_search);\n                total_items += s.count;\n            }\n\n            this.initExecProgress();\n\n            plan.filters.limit = items_per_search;\n\n            let item_count = 0;\n            let page_count = 0;\n            for (let si=0; si < plan.steps.length; ++si) {\n                let step = plan.steps[si];\n                plan.filters.latitude = step.latitude;\n                plan.filters.longitude = step.longitude;\n                plan.filters.radius = convert.toMeters(step.radius);\n\n                let step_file = stepFile(plan, si);\n                if (!options.force && fs.existsSync(step_file)) {\n                    pbar_step.ratio(si, plan.steps.length, `${si}/${plan.steps.length} steps   `);\n                    pbar_page.percent(0, \"                                \");\n                    continue;\n                }\n\n                let list = [];\n                try {\n                    let pages = Math.ceil(step.count / items_per_search);\n                    let page = 0;\n                    for (let pi = 0; pi < pages; ++pi) {\n                        plan.filters.offset = items_per_search * page++;\n                        list.push(...(await this.search(plan.filters)).jsonBody.businesses);\n                        item_count += list.length;\n                        page_count++;\n\n                        pbar_step.ratio(si, plan.steps.length, `${si}/${plan.steps.length} steps   `);\n                        pbar_page.ratio(pi, pages, `${pi}/${pages} pages in current step   `);\n                    }\n\n                    fs.writeFileSync(stepFile(plan, si), JSON.stringify(list, null, 2), \"utf8\");\n                    plan.cur_step++;\n                    this.savePlan(plan);\n                }\n                catch (err) {\n                    if (err.statusCode === 400)\n                        throw err;\n\n                    await sleep(1000);\n                    this.retry_count++;\n                }\n            }\n\n            pbar_step.percent(100, \"                                \");\n            pbar_page.percent(100, \"                                \");\n        }\n        finally {\n            this.endProcess();\n        }\n    }\n\n    verifyExec(options: VerifyOptions) {\n        multi = multimeter(process);\n        try {\n            let plan = this.loadPendingPlan();\n            let tol = num.parse(options.tolerance) || 0.01;\n            let res = [];\n\n            console.log(`[+] Verifying last execution plan with tolerance ${tol}...`);\n\n            let title = \"Plan Verification:     \\n\";\n            multi.write(title);\n            let pbar = multi.rel(title.length, 0, {\n                width: 40,\n                solid: { text: \"*\", foreground: \"magenta\" },\n                empty: { text: \" \" }\n            });\n\n            for (let i = 0; i < plan.steps.length; ++i) {\n                let step_file = stepFile(plan, i);\n                if (!fs.existsSync(step_file))\n                    console.log(`[*] Data file for step #${i} is missing.`);\n\n                let data = require(step_file);\n                if ((plan.steps[i].count - data.length) / plan.steps[i].count > tol)\n                    res.push({\n                        step: i,\n                        actual: data.length,\n                        expected: plan.steps[i].count\n                    });\n\n                pbar.ratio(i, plan.steps.length, `${i}/${plan.steps.length} steps   `);\n            }\n\n            pbar.percent(100, \"                                \");\n\n            for (let r of res)\n                console.log(`[*] Data file for step #${r.step} has ${r.actual} items, ` +\n                    `expected ${r.expected}.`);\n        }\n        finally {\n            this.endProcess();\n        }\n    }\n\n    stitchData(options: StitchOptions) {\n        let plan = this.loadPendingPlan();\n        if (!plan)\n            return;\n\n        multi = multimeter(process);\n        try {\n\n            this.initStitchProgress();\n\n            let cacl = new CoordsCalc(plan.center);\n            let added = new Set();\n            let res = [];\n            let skipped = [];\n            for (let index=0; index < plan.steps.length; index++) {\n                pbar_stitch.ratio(index, plan.steps.length, `${index}/${plan.steps.length} files`);\n\n                let step_file = stepFile(plan, index);\n                if (!fs.existsSync(step_file)) {\n                    skipped.push(step_file);\n                    continue;\n                }\n\n                let list = require(step_file);\n                list.forEach(i => {\n                    if (!added.has(i.id)) {\n                        added.add(i.id);\n\n                        //i.distance = Number(cacl.distance(i.coordinates).toFixed(2));\n                        res.push({\n                            id: i.id,\n                            name: i.name,\n                            url: i.url.split(\"?\")[0],\n                            review_count: i.review_count,\n                            price: i.price,\n                            categories: extractCats(i.categories),\n                            rating: i.rating,\n                            coordinates: i.coordinates,\n                            location: {\n                                city: i.location.city,\n                                zip_code: i.location.zip_code\n                            },\n                            display_phone: i.display_phone\n                        });\n                    }\n                });\n            }\n\n            pbar_stitch.percent(100, \"                        \");\n\n            let compressed = pako.deflate(JSON.stringify(res));\n            let tgt = (options.targetDir) ?\n                path.join(options.targetDir, path.basename(files.yelp_data)) :\n                files.yelp_data;\n\n            let tgt_comp = (options.targetDir) ?\n                path.join(options.targetDir, path.basename(files.compressed_yelp_data)) :\n                files.compressed_yelp_data;\n\n            fs.writeFileSync(tgt, JSON.stringify(res, null, 2), \"utf8\");\n            fs.writeFileSync(tgt_comp, compressed);\n            console.log(`[+] Stitching process completed, data was saved to \"${path.resolve(tgt)}\".`);\n\n            if (skipped.length)\n                skipped.forEach(sf => {\n                    console.log(`[*] Step file \"${sf}\" was skipped, the data file does not exist.`);\n                });\n        }\n        finally {\n            this.endProcess();\n        }\n\n\n        //\n\n        function extractCats(cats) {\n            let res = [];\n            cats.forEach(c => res.push(c.title));\n\n            return res;\n        }\n    }\n\n\n    //\n\n\n    private async search(filters: YelpFilters) : Promise<any> {\n        if (!this.client)\n            this.client = yelp.client(yelp_api_key);\n\n        if (!filters.limit)\n            filters.limit = 1;\n\n        let stime = Date.now();\n        let res = await this.client.search(filters);\n        this.query_count++;\n        this.total_query_time += Date.now() - stime;\n\n        return res;\n    }\n\n    private initExecProgress() {\n        console.log();\n\n        let title = \"Overall Step Progress: \\n\";\n        multi.write(title);\n        pbar_step = multi.rel(title.length, 2, {\n            width: 40,\n            solid: { text: \"*\", foreground: \"green\" },\n            empty: { text: \" \" }\n        });\n\n        title = \"Current Step Progress: \\n\";\n        multi.write(title);\n        pbar_page = multi.rel(title.length, 0, {\n            width: 40,\n            solid: { text: \"*\", foreground: \"yellow\" },\n            empty: { text: \" \" }\n        });\n    }\n\n    private initStitchProgress() {\n        let title = \"Stitching Progress:    \\n\";\n        multi.write(title);\n        pbar_stitch = multi.rel(title.length, 0, {\n            width: 40,\n            solid: { text: \"*\", foreground: \"magenta\" },\n            empty: { text: \" \" }\n        });\n    }\n\n    private savePlan(plan: ExecPlan) {\n        fs.writeFileSync(files.running_plan, JSON.stringify(plan, null, 2), \"utf8\");\n    }\n\n    private loadPendingPlan() : ExecPlan {\n        if (fs.existsSync(files.running_plan)) {\n            let plan = JSON.parse(fs.readFileSync(files.running_plan, \"utf8\"));\n            console.log(`[+] Found pending plan with ${plan.steps.length}, steps ` +\n                `remaining: ${plan.steps.length - plan.cur_step}`);\n            return plan;\n        }\n        else {\n            console.log(`[*] There is no pending plan to execute.`);\n            console.log(`    >> Use \"node importer.js plan [options]\" to generate a plan.`);\n            return null;\n        }\n\n    }\n\n    private endProcess() {\n        if (!multi)\n            return;\n\n        multi.destroy();\n        multi = null;\n    }\n\n}\n\n\n//\n\nfunction sleep(t: number) : Promise<any> {\n    return new Promise((resolve) => {\n        setTimeout(() => {\n            resolve();\n        }, t);\n    });\n}\n\nfunction expandSearch(center: Coords, radius: number) : Coords[] {\n    const max_long_ratio = 69.172;\n    const lat_ratio = 69;\n    const long_ratio = rads(center.latitude) * max_long_ratio;\n\n\n    let long_inc = radius / long_ratio;\n    let lat_inc = radius / lat_ratio;\n\n    return [\n        { latitude: center.latitude - lat_inc, longitude: center.longitude - long_inc,\n            top: center.top + -lat_inc * lat_ratio, left: center.left + -long_inc * long_ratio },\n        { latitude: center.latitude - lat_inc, longitude: center.longitude + long_inc,\n            top: center.top + -lat_inc * lat_ratio, left: center.left + long_inc * long_ratio },\n        { latitude: center.latitude + lat_inc, longitude: center.longitude - long_inc,\n            top: center.top + lat_inc * lat_ratio, left: center.left + -long_inc * long_ratio },\n        { latitude: center.latitude + lat_inc, longitude: center.longitude + long_inc,\n            top: center.top + lat_inc * lat_ratio, left: center.left + long_inc * long_ratio }\n    ];\n}\n\n\nfunction rads(angle: number) : number {\n    const pi = 3.14159265359;\n    return angle * pi / 180;\n}"]}