{"version":3,"file":"importer.js","sourceRoot":"","sources":["importer.ts"],"names":[],"mappings":";;;AAEA,kCAAgD;AAEhD,qCAAuC;AAQvC,IAAI,IAAI,GAAG,IAAI,WAAI,EAAE,CAAC;AAEtB,IAAI,OAAO,GAAG;IACV,IAAI,EAAE,YAAY;IAClB,QAAQ,EAAE,KAAK;IACf,GAAG,CAAC,OAAoB;QACpB,IAAI,CAAC,IAAI,GAAG,OAAO,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,CAAC;QACtC,IAAI,CAAC,QAAQ,GAAG,OAAO,CAAC,QAAQ,IAAI,IAAI,CAAC,QAAQ,CAAC;QAClD,OAAO,IAAI,CAAC;IAChB,CAAC;CACJ,CAAC;AAGF,OAAO;KACF,OAAO,CAAC,OAAO,CAAC;KAChB,WAAW,CAAC,wBAAwB,CAAC,CAAC;AAE3C,OAAO;KACF,OAAO,CAAC,MAAM,CAAC;KACf,WAAW,CAAC,uDAAuD,CAAC;KACpE,MAAM,CAAC,kBAAkB,EAAE,6CAA6C,CAAC;KACzE,MAAM,CAAC,sBAAsB,EAAE,uBAAuB,CAAC;KACvD,MAAM,CAAC,0BAA0B,EAAE,mDAAmD,CAAC;KACvF,MAAM,CAAC,SAAS,EAAE,0DAA0D,CAAC;KAC7E,MAAM,CAAC,cAAc,EAAE,oCAAoC,CAAC;KAC5D,MAAM,CAAC,CAAC,CAAc,EAAE,EAAE;IACvB,IAAI,CAAC,QAAQ,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,MAAM,IAAI,CAAC,EAAE,CAAC,CAAC,CAAC,IAAI,EAAE,CAAC;AAC3D,CAAC,CAAC,CAAC;AAEP,OAAO;KACF,OAAO,CAAC,MAAM,CAAC;KACf,WAAW,CAAC,sCAAsC,CAAC;KACnD,MAAM,CAAC,CAAC,OAAO,EAAE,EAAE;IAChB,IAAI,CAAC,QAAQ,CAAC,OAAO,CAAC,CAAC,IAAI,EAAE,CAAC;AAClC,CAAC,CAAC,CAAC;AAEP,OAAO;KACF,OAAO,CAAC,QAAQ,CAAC;KACjB,WAAW,CAAC,oEAAoE,CAAC;KACjF,MAAM,CAAC,4BAA4B,EAAE,EAAE,CAAC;KACxC,MAAM,CAAC,CAAC,OAAO,EAAE,EAAE;IAChB,IAAI,CAAC,UAAU,CAAC,OAAO,CAAC,CAAC;AAC7B,CAAC,CAAC,CAAC;AAEP,OAAO;KACF,OAAO,CAAC,QAAQ,CAAC;KACjB,WAAW,CAAC,6DAA6D,CAAC;KAC1E,MAAM,CAAC,uBAAuB,EAAE,mCAAmC,CAAC;KACpE,MAAM,CAAC,CAAC,OAAO,EAAE,EAAE;IAChB,IAAI,CAAC,UAAU,CAAC,OAAO,CAAC,CAAC;AAC7B,CAAC,CAAC,CAAC;AAEP,OAAO;KACF,KAAK,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC","sourcesContent":["#!/usr/bin/env node\n\nimport { Yelp, LoadPlanOptions } from \"../yelp\";\nimport { date } from \"@crabel/util\";\nimport  program = require(\"commander\");\n\ntype PlanOptions = LoadPlanOptions & {\n    term: string;\n    radius: number;\n    location: number | string;\n}\n\nlet yelp = new Yelp();\n\nlet filters = {\n    term: \"restaurant\",\n    location: 91356,\n    set(options: PlanOptions) {\n        this.term = options.term || this.term;\n        this.location = options.location || this.location;\n        return this;\n    }\n};\n\n\nprogram\n    .version(\"1.0.0\")\n    .description(\"Import data from Yelp.\");\n\nprogram\n    .command(\"plan\")\n    .description(\"Generate an execution plan with the given parameters.\")\n    .option(\"-t,--term <TERM>\", \"Term to search for, default is 'restaurant'\")\n    .option(\"-r,--radius <RADIUS>\", \"Radius of the search.\")\n    .option(\"-l,--location <LOCATION>\", \"Location parameter, can be a city, zip code, etc.\")\n    .option(\"--force\", \"Forces the creation of a new plan if one is in progress.\")\n    .option(\"-V,--verbose\", \"Print plan details to the console.\")\n    .action((o: PlanOptions) => {\n        yelp.loadPlan(filters.set(o), o.radius || 6, o).then();\n    });\n\nprogram\n    .command(\"exec\")\n    .description(\"Execute a previously generated plan.\")\n    .action((options) => {\n        yelp.execPlan(options).then();\n    });\n\nprogram\n    .command(\"verify\")\n    .description(\"Verify that the data files are consistent with the execution plan.\")\n    .option(\"-t,--tolerance <TOLERANCE>\", \"\")\n    .action((options) => {\n        yelp.verifyExec(options);\n    });\n\nprogram\n    .command(\"stitch\")\n    .description(\"Stitch together data files generated during plan execution.\")\n    .option(\"-t,--target-dir <DIR>\", \"Location the data will be stored.\")\n    .action((options) => {\n        yelp.stitchData(options);\n    });\n\nprogram\n    .parse(process.argv);\n\n\n"]}