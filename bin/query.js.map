{"version":3,"file":"query.js","sourceRoot":"","sources":["query.ts"],"names":[],"mappings":"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","sourcesContent":["#!/usr/bin/env node\n\nimport program = require(\"commander\");\nimport table = require(\"@crabel/table\");\nimport {YelpData, Filters} from \"../yelp-data\";\nimport fs = require(\"fs\");\nimport {files} from \"../config\";\n\n\nprogram\n    .version(\"1.0.0\")\n    .description(\"Query yelp for restaurants with the given criteria.\")\n    .option(\"-l,--location <LOCATION>\", \"Location parameter, can be a city, zip code, etc.\")\n    .option(\"-r,--rating <RATING>\", \"Minimum rating.\")\n    .option(\"-R,--review_count <REVIEW_COUNT>\", \"Minimum rating.\")\n    .option(\"-d,--distance <DISTANCE>\", \"Maximum distance.\")\n    .option(\"-p,--price <PRICE>\", \"Price levels to filer.\")\n    .option(\"-c,--category <CATEGORY>\", \"Items with the given category.\")\n    .option(\"--all-cats\", \"Print all categories.\")\n    .option(\"-s,--sort <SORT>\", \"Sort results by rating, review_count or distance.\")\n    .option(\"-n,--lines <LINES>\", \"Number of lines to display.\")\n    .option(\"-o,--offset <OFFSET>\", \"Number of items to skip from the beginning of the list.\")\n    .option(\"--csv\", \"Format output as CSV\")\n    .parse(process.argv);\n\n\nlet yelp: YelpData = new YelpData(load(), program.location);\n\nlet categories = new Set();\n\nconst know_cats = [\n];\n\n\n\n(async () => {\n\n    let filters : Filters = {\n        rating: program.rating,\n        review_count: program.review_count,\n        distance: program.distance,\n        price: program.price,\n        category: program.category\n    };\n\n    let bs = await yelp.query(filters, program.sort);\n\n    program.offset = +program.offset || 0;\n    program.lines = +program.lines;\n    if (program.lines)\n        bs = bs.slice(program.offset, program.offset + program.lines);\n\n    if (program.csv) {\n        let csv = [ \"index,name,cats,rating,review_count,price,distance,city,zip_code,phone,url\" ];\n        let i = 0;\n        for (let b of bs) {\n            let cats = [];\n            b.categories.forEach(c => cats.push(c.title));\n\n            let dist = yelp.coords.distance(b.coordinates).toFixed(2);\n\n            csv.push(`${i++},\"${b.name}\",\"${cats.join(\", \")}\",${b.rating},` +\n                `${b.review_count},${b.price},${dist},\"${b.display_phone}\",\"${b.location.city}\",` +\n                `${b.location.zip_code},${b.url}`);\n        }\n\n        console.log(csv.join(\"\\n\"));\n    }\n    else {\n\n        table.log(bs, [\n            \"name\",\n            {caption: \"categories\",\n                custom_format(v, c, d) {\n                    return strCats(d);\n                }, wrap: true\n            },\n            {caption: \"rating\", align: table.Align.right, decimals: 1},\n            {caption: \"review_count\", thousand_separator: true},\n            {caption: \"price\", align: table.Align.right},\n            {caption: \"distance\",\n                custom_format(v, c, d) {\n                    return yelp.coords.distance(d.coordinates).toFixed(2)\n                }\n            },\n            {name: \"display_phone\", caption: \"phone\", align: table.Align.right},\n            {\n                caption: \"city\", custom_format(v, c, d) {\n                    return d.location.city;\n                }, align: table.Align.right\n            },\n            {\n                caption: \"zip_code\", custom_format(v, c, d) {\n                    return d.location.zip_code;\n                }, align: table.Align.right\n            },\n            \"url\"\n        ], table.renderers.grey());\n\n\n\n        let cats = Array.from(categories);\n        cats.sort((a, b) => {\n            return (a < b) ? -1 : (a === b) ? 0 : 1;\n        });\n\n        fs.writeFileSync(files.categories, JSON.stringify(cats, null, 4), \"utf8\");\n    }\n\n})();\n\n\n\n//\n\n\nfunction load(file_name?: string) {\n    if (undefined === file_name)\n        file_name = files.yelp_data;\n\n    if (!fs.existsSync(file_name))\n        throw new Error(`File \"${file_name}\" doesn't exist.`);\n\n    return JSON.parse(fs.readFileSync(file_name, \"utf8\"));\n}\n\n\nfunction strCats(item) {\n    if (!item.categories || !item.categories.length)\n        return \"\";\n\n    if (!program.allCats)\n        return item.categories[0].title;\n    else {\n        let res = \"\";\n        for (let i = 0; i < item.categories.length; ++i) {\n            res += item.categories[i].title + \"\\n\";\n            if (!(<any>know_cats).includes(item.categories[i].title))\n                categories.add(item.categories[i].title);\n        }\n\n        return res;\n    }\n}\n"]}