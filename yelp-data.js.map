{"version":3,"file":"yelp-data.js","sourceRoot":"","sources":["yelp-data.ts"],"names":[],"mappings":";;;;;;;;;;AAAA,4CAA6C;AAE7C,MAAM,YAAY,GAAG;IACjB,IAAI,EAAE;QACF,QAAQ,EAAE,SAAS;QACnB,SAAS,EAAE,CAAC,WAAW;KAC1B;CACJ,CAAC;AAWF,IAAY,SAKX;AALD,WAAY,SAAS;IACjB,0CAA6B,CAAA;IAC7B,8BAAiB,CAAA;IACjB,kCAAqB,CAAA;IACrB,4BAAe,CAAA;AACnB,CAAC,EALW,SAAS,GAAT,iBAAS,KAAT,iBAAS,QAKpB;AAGD,MAAa,QAAQ;IAMjB,YAAY,IAAW,EAAE,WAAgB,MAAM;QAH/C,SAAI,GAAG,EAAE,CAAC;QAIN,IAAI,CAAC,WAAW,CAAC,QAAQ,CAAC,CAAC;QAC3B,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;IACvB,CAAC;IAED,WAAW,CAAC,QAAa;QACrB,IAAI,CAAC,QAAQ,GAAG,QAAQ,CAAC;QACzB,IAAI,IAAI,CAAC,QAAQ,IAAI,YAAY;YAC7B,IAAI,CAAC,QAAQ,GAAG,YAAY,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;IACpD,CAAC;IAED,OAAO,CAAC,IAAW;QACf,IAAI,CAAC,UAAU,GAAG,IAAI,GAAG,EAAE,CAAC;QAC5B,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,EAAE;YAC1B,IAAI,GAAG,CAAC,UAAU;gBACd,GAAG,CAAC,UAAU,CAAC,OAAO,CAAC,CAAC,CAAC,EAAE,CAAC,IAAI,CAAC,UAAU,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;YAExD,OAAO,CAAC,CAAC,GAAG,CAAC,QAAQ,IAAI,CAAC,CAAC,GAAG,CAAC,WAAW,CAAC;QAE/C,CAAC,CAAC,CAAC;IACP,CAAC;IAEY,KAAK,CAAC,OAAgB,EAAE,IAAgB;;YACjD,IAAI,QAAQ,KAAK,OAAO,IAAI,CAAC,QAAQ,IAAI,QAAQ,KAAK,OAAO,IAAI,CAAC,QAAQ;gBACtE,IAAI,CAAC,QAAQ,GAAG,MAAM,UAAU,CAAC,SAAS,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;YAE9D,IAAI,QAAQ,KAAK,OAAO,OAAO,CAAC,QAAQ;gBACpC,OAAO,CAAC,QAAQ,GAAG,CAAE,OAAO,CAAC,QAAQ,CAAE,CAAC;YAE5C,IAAI,CAAC,MAAM,GAAG,IAAI,UAAU,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;YAE5C,IAAI,MAAiB,CAAC;YACtB,IAAI,SAAS,KAAK,OAAO,CAAC,KAAK;gBAC3B,MAAM,GAAG,OAAO,CAAC,KAAK,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,IAAI,EAAE,CAAC,CAAC;YAEzD,iBAAiB;YACjB,IAAI,EAAE,GAAG,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,GAAG,EAAE,EAAE;gBAC9B,OAAO,CAAC,CAAC,CAAC,OAAO,CAAC,YAAY,IAAI,GAAG,CAAC,YAAY,IAAI,OAAO,CAAC,YAAY,CAAC;uBACpE,CAAC,CAAC,OAAO,CAAC,MAAM,IAAI,MAAM,CAAC,GAAG,CAAC,MAAM,CAAC,IAAI,OAAO,CAAC,MAAM,CAAC;uBACzD,CAAC,CAAC,OAAO,CAAC,QAAQ,IAAI,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,GAAG,CAAC,WAAW,CAAC,IAAI,OAAO,CAAC,QAAQ,CAAC,CAAC;uBACjF,CAAC,CAAC,MAAM,IAAI,OAAO,CAAC,KAAK,CAAC,QAAQ,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC;uBAC9C,CAAC,CAAC,OAAO,CAAC,QAAQ,IAAI,CAAC,OAAO,CAAC,QAAQ,CAAC,MAAM,IAAI,QAAQ,CAAC,WAAW,CAAC,GAAG,EAAE,OAAO,CAAC,QAAQ,CAAC,CAAC,CAAC;YAC1G,CAAC,CAAC,CAAC;YAEH,eAAe;YACf,IAAI,IAAI,EAAE;gBACN,IAAI,SAAS,CAAC,QAAQ,KAAK,IAAI;oBAC3B,EAAE,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,EAAE;wBACb,OAAO,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC,CAAC,WAAW,CAAC,GAAG,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC,CAAC,WAAW,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;oBAC9F,CAAC,CAAC,CAAC;qBACF,IAAI,IAAI,EAAE;oBAEX,IAAI,SAAS,CAAC,MAAM,KAAK,IAAI;wBACzB,EAAE,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,EAAE;4BACb,IAAI,CAAC,CAAC,MAAM,KAAK,CAAC,CAAC,MAAM;gCACrB,OAAO,CAAC,CAAC,YAAY,GAAG,CAAC,CAAC,YAAY,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;4BAEpD,OAAO,CAAC,CAAC,MAAM,GAAG,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;wBACxC,CAAC,CAAC,CAAC;;wBAEH,EAAE,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,EAAE;4BACb,OAAO,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;wBACtC,CAAC,CAAC,CAAC;iBACV;aACJ;YAED,OAAO,EAAE,CAAC;QACd,CAAC;KAAA;IAED,EAAE;IAEM,MAAM,CAAC,WAAW,CAAC,GAAG,EAAE,IAAuB;QACnD,KAAK,IAAI,CAAC,IAAI,GAAG,CAAC,UAAU,EAAE;YAC1B,KAAK,IAAI,GAAG,IAAI,IAAI;gBAChB,IAAI,CAAC,CAAC,WAAW,EAAE,CAAC,OAAO,CAAC,GAAG,CAAC,WAAW,EAAE,CAAC,IAAI,CAAC;oBAC/C,OAAO,IAAI,CAAC;SACvB;QAED,OAAO,KAAK,CAAC;IACjB,CAAC;CACJ;AAtFD,4BAsFC","sourcesContent":["import CoordsCalc = require(\"./coords-calc\");\n\nconst location_map = {\n    home: {\n        latitude: 34.176455,\n        longitude: -118.5404983\n    }\n};\n\n\nexport type Filters = {\n    rating?: number;\n    review_count?: number;\n    distance?: number;\n    price?: string;\n    category?: string | string[];\n}\n\nexport enum SortField {\n    review_count = \"review_count\",\n    rating = \"rating\",\n    distance = \"distance\",\n    price = \"price\"\n}\n\n\nexport class YelpData {\n    location: any;\n    coords: CoordsCalc;\n    data = [];\n    categories: Set<string>;\n\n    constructor(data: any[], location: any = \"home\") {\n        this.setLocation(location);\n        this.setData(data);\n    }\n\n    setLocation(location: any) {\n        this.location = location;\n        if (this.location in location_map)\n            this.location = location_map[this.location];\n    }\n\n    setData(data: any[]) {\n        this.categories = new Set();\n        this.data = data.filter(biz => {\n            if (biz.categories)\n                biz.categories.forEach(c => this.categories.add(c));\n\n            return !!biz.location && !!biz.coordinates;\n\n        });\n    }\n\n    public async query(filters: Filters, sort?: SortField) {\n        if (\"string\" === typeof this.location || \"number\" === typeof this.location)\n            this.location = await CoordsCalc.getCoords(this.location);\n\n        if (\"string\" === typeof filters.category)\n            filters.category = [ filters.category ];\n\n        this.coords = new CoordsCalc(this.location);\n\n        let prices : string[];\n        if (undefined !== filters.price)\n            prices = filters.price.split(\",\").map(p => p.trim());\n\n        // Filter Results\n        let bs = this.data.filter((biz) => {\n            return ((!filters.review_count || biz.review_count >= filters.review_count)\n                && (!filters.rating || Number(biz.rating) >= filters.rating)\n                && (!filters.distance || this.coords.distance(biz.coordinates) <= filters.distance))\n                && (!prices || filters.price.includes(biz.price))\n                && (!filters.category || !filters.category.length || YelpData.hasCategory(biz, filters.category));\n        });\n\n        // Sort Results\n        if (sort) {\n            if (SortField.distance === sort)\n                bs.sort((a, b) => {\n                    return this.coords.distance(a.coordinates) < this.coords.distance(b.coordinates) ? -1 : 1;\n                });\n            else if (sort) {\n\n                if (SortField.rating === sort)\n                    bs.sort((a, b) => {\n                        if (a.rating === b.rating)\n                            return a.review_count < b.review_count ? 1 : -1;\n\n                        return a.rating < b.rating ? 1 : -1;\n                    });\n                else\n                    bs.sort((a, b) => {\n                        return a[sort] < b[sort] ? 1 : -1;\n                    });\n            }\n        }\n\n        return bs;\n    }\n\n    //\n\n    private static hasCategory(biz, cats: string | string[]) : boolean {\n        for (let c of biz.categories) {\n            for (let cat of cats)\n                if (c.toLowerCase().indexOf(cat.toLowerCase()) >= 0)\n                    return true;\n        }\n\n        return false;\n    }\n}"]}